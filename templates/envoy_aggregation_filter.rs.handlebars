use indexmap::IndexMap;
use log::trace;
use petgraph::graph::Graph;
use petgraph::Incoming;
use proxy_wasm::traits::Context;
use proxy_wasm::traits::HttpContext;
use proxy_wasm::traits::RootContext;
use proxy_wasm::types::Action;
use proxy_wasm::types::ContextType;
use proxy_wasm::types::LogLevel;
use std::convert::TryFrom;
use std::fmt;
use std::time::Duration;

// ---------------------- General Helper Functions ----------------------------


#[repr(u8)]
#[derive(Debug, PartialEq)]
#[allow(dead_code)]
pub enum HttpType {
    Unspecified = 0,
    Request = 1,
    Response = 2,
}

{{#each aggregation_udf_table}} {{{this.impl}}} {{/each}}

// ---------------------------- Filter ------------------------------------

#[no_mangle]
pub fn _start() {
    proxy_wasm::set_log_level(LogLevel::Info);
    proxy_wasm::set_root_context(|_| -> Box<dyn RootContext> {
        Box::new(HttpHeadersRoot {
            target_graph: create_target_graph(),
        })
    });
}

struct HttpHeadersRoot {}

impl Context for HttpHeadersRoot {}

impl RootContext for HttpHeadersRoot {
    fn get_type(&self) -> Option<ContextType> {
        Some(ContextType::HttpContext)
    }

    fn on_configure(&mut self, _: usize) -> bool {
        true
    }

    fn create_http_context(&self, context_id: u32) -> Option<Box<dyn HttpContext>> {
        let workload_name: String;
        if let Some(workload) = self.get_property(vec!["node", "metadata", "WORKLOAD_NAME"]) {
            match String::from_utf8(workload) {
                Ok(cast_string) => workload_name = cast_string,
                Err(_e) => workload_name = String::new(),
            }
        } else {
            workload_name = String::new();
        }
        Some(Box::new(HttpHeaders {
            context_id,
            workload_name,
            // FIXME: This should be a reference instead of a copy
            // Extremely annoying but I can not guarantee a life-time here
        }))
    }
}

pub struct HttpHeaders {
    pub context_id: u32,
    pub workload_name: String,
    pub target_graph: Graph<(String, IndexMap<String, String>), String>,
}

impl HttpContext for HttpBody {
    fn on_http_request_body(&mut self, body_size: usize, end_of_stream: bool) -> Action {
        if !end_of_stream {
            return Action::Pause
        }
        if let Some(body_bytes) = self.get_http_response_body(0, body_size) {
            let body_str = String::from_utf8(body_bytes).unwrap();
            // TODO:  how to parse body_str?
            let mut to_return = vec![x.clone()];
            {{#each aggregation_udf_table}}
            let mut {{{this.id}}}_str = "{{{this.id}}}: ".to_string();
            {{{this.id}}}_str.push_str(&self.{{{this.id}}}.{{{this.exec_func}}}(x.uid, x.data.clone()) );
            to_return.push(Rpc::new(&{{{this.id}}}_str));
            {{/each}}
            if body_str.contains("secret") {
                let new_body = format!("Original message body ({} bytes) redacted.", body_size);
                self.set_http_response_body(0, body_size, &new_body.into_bytes());
        }
        Action::Continue
    }


    fn on_http_request_headers(&mut self, num_headers: usize) -> Action {
        // is the info in the headers??
        Action::Continue
    }
}
