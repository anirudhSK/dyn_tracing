// ---------------------- Generated Functions ----------------------------

use super::filter_base::HttpHeaders;
use proxy_wasm::traits::Context;
use indexmap::IndexMap;
use petgraph::graph::{Graph, NodeIndex};
use utils::graph::graph_utils::generate_target_graph;
use utils::graph::graph_utils::get_node_with_id;
use utils::graph::serde::FerriedData;
use utils::graph::serde::Property;

// insert UDFs here
{{#each scalar_udf_table}}{{{this.func_impl}}}{{/each}}

pub fn create_target_graph() -> Graph<
    (
        std::string::String,
        IndexMap<u64, std::string::String>,
    ),
    (),
> {
    {{#each target_blocks}}{{{this}}}{{/each}}
}

pub fn collect_envoy_properties(
    http_headers: &HttpHeaders,
    fd: &mut FerriedData,
) -> Result<(), String> {
    {{#each collect_properties_blocks}}
    {{{~this}}}
    {{/each}}
    return Ok(());
}

pub fn execute_udfs_and_check_trace_lvl_prop(http_headers: &HttpHeaders, fd: &mut FerriedData) -> bool {
    // Empty for this query, but in general, will be useful
    {{#each udf_blocks}}{{{this}}}{{/each}}
    let root_id = "{{this.root_id}}";
    {{#each trace_lvl_prop_blocks}}{{{this}}}{{/each}}
    return true;
}

pub fn get_value_for_storage(
    target_graph: &Graph<
        (
            std::string::String,
            IndexMap<u64, std::string::String>,
        ),
        (),
    >,
    mapping: &Vec<(NodeIndex, NodeIndex)>,
    stored_data: &FerriedData,
) -> Option<String> {
    let value: String;
    {{#each response_blocks}}{{{this}}}{{/each}}

    return Some(value);
}


