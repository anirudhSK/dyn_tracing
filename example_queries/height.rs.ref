use rpc_lib::rpc::Rpc;
use indexmap::map::IndexMap;
use petgraph::graph::{Graph, NodeIndex};
use petgraph::Incoming;
use utils::graph::graph_utils;
use utils::graph::iso::find_mapping_shamir_centralized;
use serde::{Serialize, Deserialize};
extern crate serde_yaml;

pub type CodeletType = fn(&Filter, &Rpc) -> Option<Rpc>;

#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, PartialOrd, Ord, Clone)]
pub struct Property {
    entity: String,
    property_name: String,
    value: String,
}

impl Property {
    fn default() -> Property {
        Property {
            entity: String::new(),
            property_name: String::new(),
            value: String::new()
        }
    }

    fn new(entity: String, property_name: String, value: String) -> Property {
        Property {
            entity,
            property_name,
            value
        }
    }
}
#[derive(Debug, Serialize, Deserialize)]
pub struct FerriedData {
    trace_graph: Graph<(String, IndexMap<String, String>), String>,
    unassigned_properties: Vec<Property>, // entity property value
}

impl FerriedData {
    fn default() -> FerriedData {
        FerriedData {
            trace_graph: Graph::new(),
            unassigned_properties: Vec::new(),
            
        }
    }

    // take any unassigned properties that apply to nodes in the graph,
    // and associate them with those nodes
    fn assign_properties(&mut self) {
        let mut to_delete = Vec::new();
        for property in &mut self.unassigned_properties {
            let node = graph_utils::get_node_with_id(&self.trace_graph, property.entity.clone());
            if node.is_some() {
                self.trace_graph.node_weight_mut(node.unwrap()).unwrap().1.insert(property.property_name.clone(), property.value.clone());
                to_delete.push(property.clone());
            }
        }
        self.unassigned_properties.retain(|x| !to_delete.contains(&x));

    }
}

fn put_ferried_data_in_hdrs(fd: &mut FerriedData, hdr: &mut IndexMap<String,String>) {
    match serde_yaml::to_string(fd) {
        Ok(stored_data_string) => {
            hdr.insert("ferried_data".to_string(), stored_data_string);
        }
        Err(e) => {
            log::error!("ERROR:  could not translate stored data to json string: {0}\n", e);
        }
    }
}


// user defined functions:
// udf_type: Scalar
// leaf_func: leaf_height
// mid_func: mid_height
// id: height

fn leaf_height(_graph: &Graph<(String, IndexMap<String, String>), String>) -> u32 {
    return 0;
}

// TODO:  must children's responses always be in string form?  can we generalize?
fn mid_height(_graph: &Graph<(String, IndexMap<String, String>), String>, children_responses: Vec<String>) -> u32 {
    let mut max = 0;
    for response in children_responses {
        let response_as_u32 = response.parse::<u32>();
            match response_as_u32 {
                Ok(num) => { if num > max { max = num; } }
                Err(e) => { print!("error: {0}\n", e); }
            }
    }
    return max + 1;
}



#[derive(Clone, Debug)]
pub struct Filter {
    pub whoami: Option<String>,
    pub target_graph: Option<Graph<(String, IndexMap<String, String>), String>>,
    pub filter_state: IndexMap<String, String>,
    pub envoy_shared_data: IndexMap<String, String>, // trace ID to stored ferried data as string 
    pub collected_properties: Vec<String>, //properties to collect
}

impl Filter {
    #[no_mangle]
    pub fn new() -> *mut Filter {
         Box::into_raw(Box::new(Filter {
            whoami: None,
            target_graph: None,
            filter_state: IndexMap::new(),
            envoy_shared_data: IndexMap::<String, String>::new(),
            collected_properties: vec!( "service_name".to_string(), "height".to_string(),  ),
         }))
    }

    #[no_mangle]
    pub fn new_with_envoy_properties(string_data: IndexMap<String, String>) -> *mut Filter {
        Box::into_raw(Box::new(Filter {
                                   whoami: None,
                                   target_graph: None,
                                   filter_state: string_data,
                                   envoy_shared_data: IndexMap::new(),
                                   collected_properties: vec!("service_name".to_string(), "height".to_string(),  ),
                               }))
     }

    pub fn init_filter(&mut self) {
        if self.whoami.is_none() { self.set_whoami(); assert!(self.whoami.is_some()); }
        if self.target_graph.is_none() { self.create_target_graph(); } 
        assert!(self.whoami.is_some());
    }

    pub fn set_whoami(&mut self) {
        if !self.filter_state.contains_key("node.metadata.WORKLOAD_NAME") {
            log::warn!("filter was initialized without envoy properties and thus cannot function");
            return;
        }
        let my_node = self
            .filter_state["node.metadata.WORKLOAD_NAME"].clone();
        self.whoami = Some(my_node);
        assert!(self.whoami.is_some());
    }

    pub fn store_headers(&mut self, uid_64: u64, headers: IndexMap<String,String>) {
        // If you don't have data, nothing to store
        if !headers.contains_key("ferried_data") { 
            log::warn!("no ferried data\n");
            return;
        }
        let uid = uid_64.to_string();
        // If there is no data stored, you needn't merge - just throw it in
        if !self.envoy_shared_data.contains_key(&uid) {
            self.envoy_shared_data.insert(uid.clone(), headers["ferried_data"].clone());
        }

        // Else, we merge in 2 parts, for each of the struct values
        let mut data: FerriedData;
        let mut stored_data: FerriedData;

        match serde_yaml::from_str(&headers["ferried_data"]) {
            Ok(d) => { data = d; }
            Err(e) => { log::error!("could not parse envoy shared data: {0}\n", e); return; }
        }
        match serde_yaml::from_str(&self.envoy_shared_data[&uid]) {
            Ok(d) => { stored_data = d; }
            Err(e) => { log::error!("could not parse envoy shared data: {0}\n", e); return; }
        }


        // 2. Merge the graphs by simply adding it - later, when we merge, we will
        //    make a root

        // add node
        for node in data.trace_graph.node_indices() {
            stored_data.trace_graph.add_node(data.trace_graph.node_weight(node).unwrap().clone());
        }
        // add edges
        for edge in data.trace_graph.edge_indices() {
            match data.trace_graph.edge_endpoints(edge) {
                Some((edge0, edge1)) => {
                    let edge0_weight = &data.trace_graph.node_weight(edge0).unwrap().0;
                    let edge1_weight = &data.trace_graph.node_weight(edge1).unwrap().0;
                    let edge0_in_stored_graph = graph_utils::get_node_with_id(&stored_data.trace_graph, edge0_weight.to_string()).unwrap();
                    let edge1_in_stored_graph = graph_utils::get_node_with_id(&stored_data.trace_graph, edge1_weight.to_string()).unwrap();
                    stored_data.trace_graph.add_edge(edge0_in_stored_graph, edge1_in_stored_graph, String::new());
                }
                None => {
                    log::error!("no edge endpoints found \n");
                    return;
                }
            }
        }

        // 3. merge unassigned properties
        //    these are properties we have collected but are not yet in the graph
        stored_data.unassigned_properties.append(&mut data.unassigned_properties);
        stored_data.unassigned_properties.sort_unstable();
        stored_data.unassigned_properties.dedup();
        stored_data.assign_properties();

        match serde_yaml::to_string(&stored_data) {
            Ok(stored_data_string) => {
                self.envoy_shared_data.insert(uid, stored_data_string);
            }
            Err(e) => {
                log::error!("could not translate stored data to json string: {0}\n", e);
            }
        }

    }

    pub fn merge_headers(&mut self, uid: u64, mut new_rpc_headers: IndexMap<String, String>) -> IndexMap<String, String> {
        let uid_str = uid.to_string();
        let mut my_indexmap = IndexMap::new();
        my_indexmap.insert("node.metadata.WORKLOAD_NAME".to_string(), self.whoami.as_ref().unwrap().clone());

        if self.envoy_shared_data.contains_key(&uid_str) {
            match serde_yaml::from_str(&self.envoy_shared_data[&uid_str]) {
                Ok(d) => {
                    // 1. TODO:  if needed, do things to set S
                    // 2. If response, add yourself as root
                    if new_rpc_headers["direction"] == "response" {
                        let mut data: FerriedData = d;
                        let mut previous_roots = Vec::new();
                        for node in data.trace_graph.node_indices() {
                            if data.trace_graph.neighbors_directed(node, Incoming).count() == 0 {
                                previous_roots.push(node);
                            }
                        }
                        let me = data.trace_graph.add_node(
                            (self.whoami.as_ref().unwrap().to_string(), my_indexmap));
    
                        for previous_root in previous_roots {
                            data.trace_graph.add_edge(me, previous_root, String::new());
                        }
                        data.assign_properties();

                        // Finally, put all the data back in the headers
                        put_ferried_data_in_hdrs(&mut data, &mut new_rpc_headers);
                    }
                }
                Err(e) => {
                    log::error!("could not parse envoy shared data: {0}\n", e);
                }

            }
        } else {
            let mut new_ferried_data = FerriedData::default();
            new_ferried_data.trace_graph.add_node((self.whoami.as_ref().unwrap().to_string(), my_indexmap));
            put_ferried_data_in_hdrs(&mut new_ferried_data, &mut new_rpc_headers);
        }
        return new_rpc_headers;
    }

    pub fn create_target_graph(&mut self) {
         let vertices = vec!(  "a".to_string(), "b".to_string(), "c".to_string(),  );
         let edges = vec!(   ("a".to_string(), "b".to_string() ),   ("b".to_string(), "c".to_string() ),   );
         let mut ids_to_properties: IndexMap<String, IndexMap<String, String>> = IndexMap::new();
         ids_to_properties.insert("a".to_string(), IndexMap::new());
         ids_to_properties.insert("b".to_string(), IndexMap::new());
         ids_to_properties.insert("c".to_string(), IndexMap::new());
         let mut b_hashmap = ids_to_properties.get_mut("b").unwrap();
         b_hashmap.insert("service_name".to_string(), "reviews-v1".to_string());
         self.target_graph = Some(graph_utils::generate_target_graph(vertices, edges, ids_to_properties));
 
    }

    pub fn on_incoming_requests(&mut self, mut x: Rpc) -> Vec<Rpc> {
        // Fetch ferried data
        let mut ferried_data: FerriedData;
        if !x.headers.contains_key("ferried_data") {
            ferried_data = FerriedData::default();
        } else {
            match serde_yaml::from_str(&x.headers["ferried_data"]) {
                Ok(fd) => { ferried_data = fd; }
                Err(e) => {
                    log::error!("could not translate stored data to json string: {0}\n", e);
                    return vec![x];
                }
            }
        }

        // Insert properties to collect
        let mut prop_tuple;
        prop_tuple = Property::new(self.whoami.as_ref().unwrap().to_string(),
                                                   "service_name".to_string(), 
                                                   self.filter_state["node.metadata.WORKLOAD_NAME"].clone());
                                             ferried_data.unassigned_properties.push(prop_tuple); 

        // Return ferried data to x, and store headers
        put_ferried_data_in_hdrs(&mut ferried_data, &mut x.headers);
        self.store_headers(x.uid, x.headers.clone());
        return vec![x];
    }

    pub fn on_outgoing_responses(&mut self, mut x: Rpc) -> Vec<Rpc> {
        // 0. Look up stored baggage, and merge it
        x.headers = self.merge_headers(x.uid, x.headers);

        // at most, we return two rpcs:  one to continue on and one to storage
        let mut original_rpc = x.clone();
        let mut storage_rpc : Rpc;

        // 1. retrieve our ferried data, containing the newly merged
        //    baggage
        let mut ferried_data: FerriedData;
        if !original_rpc.headers.contains_key("ferried_data") {
            ferried_data = FerriedData::default();
        } else {
            match serde_yaml::from_str(&mut original_rpc.headers["ferried_data"]) {
                Ok(fd) => { ferried_data = fd; }
                Err(e) => { log::error!("could not parse ferried data: {0}\n", e); return vec![original_rpc]; }
            }
        }

        // 2. calculate UDFs and store result, and check trace level properties
        let my_height_value;
            let child_iterator = ferried_data.trace_graph.neighbors_directed(
                graph_utils::get_node_with_id(&ferried_data.trace_graph, self.whoami.as_ref().unwrap().clone()).unwrap(),
                petgraph::Outgoing);
            let mut child_values = Vec::new();
            for child in child_iterator {
                child_values.push(ferried_data.trace_graph.node_weight(child).unwrap().1["height"].clone());
            }
            if child_values.len() == 0 {
                my_height_value = leaf_height(&ferried_data.trace_graph).to_string();
            } else {
                my_height_value = mid_height(&ferried_data.trace_graph, child_values).to_string();
            }

         
        let node = graph_utils::get_node_with_id(&ferried_data.trace_graph, self.whoami.as_ref().unwrap().to_string()).unwrap();
        // if we already have the property, don't add it
        if !( ferried_data.trace_graph.node_weight(node).unwrap().1.contains_key("height") &&
               ferried_data.trace_graph.node_weight(node).unwrap().1["height"] == my_height_value ) {
           ferried_data.trace_graph.node_weight_mut(node).unwrap().1.insert(
               "height".to_string(), my_height_value);
        }
         let root_id = "productpage-v1";
            if self.whoami.as_ref().unwrap() == root_id {
         let mut trace_prop_str : String;
        } 

        // 3. perform isomorphism and possibly return if root node
        if self.whoami.as_ref().unwrap() == root_id {
            let mapping = find_mapping_shamir_centralized(
                &ferried_data.trace_graph,
                self.target_graph.as_ref().unwrap(),
            );
            if mapping.is_some() {
                let m = mapping.unwrap();
                let mut value : String;
                let node_ptr = graph_utils::get_node_with_id(&self.target_graph.as_ref().unwrap(), "a".to_string());
        if node_ptr.is_none() {
           log::warn!("Node a not found");
                return vec![original_rpc];
        }
        let mut trace_node_index = None;
        for map in m {
            if self.target_graph.as_ref().unwrap().node_weight(map.0).unwrap().0 == "a" {
                trace_node_index = Some(map.1);
                break;
            }
        }
        if trace_node_index == None || !&ferried_data.trace_graph.node_weight(trace_node_index.unwrap()).unwrap().1.contains_key("height") {
            // we have not yet collected the return property or have a mapping error
            return vec![original_rpc];
        }
        let mut ret_height = &ferried_data.trace_graph.node_weight(trace_node_index.unwrap()).unwrap().1[ "height" ];

        value = ret_height.to_string();
 

                // Now you have the return value, so
                // 3a. Make a storage rpc
                storage_rpc = Rpc::new_with_src(&value, self.whoami.as_ref().unwrap());
                storage_rpc
                    .headers
                    .insert("dest".to_string(), "storage".to_string());
                storage_rpc
                    .headers
                    .insert("direction".to_string(), "request".to_string());
                storage_rpc.headers.insert("src".to_string(), self.whoami.clone().unwrap());

                // 3b. Put baggage into regular rpc
                put_ferried_data_in_hdrs(&mut ferried_data, &mut original_rpc.headers);
                return vec![original_rpc, storage_rpc];
            }
       }
       put_ferried_data_in_hdrs(&mut ferried_data, &mut original_rpc.headers);
       return vec![original_rpc];
    }

    pub fn on_outgoing_requests(&mut self, mut x: Rpc) -> Vec<Rpc>{
        x.headers = self.merge_headers(x.uid, x.headers);
        return vec![x];
    }

    pub fn on_incoming_responses(&mut self, mut x: Rpc) -> Vec<Rpc> {
        self.store_headers(x.uid, x.headers.clone());
        return vec![x];
    }


    #[no_mangle]
    pub fn execute(&mut self, x: &Rpc) -> Vec<Rpc> {
        self.init_filter();
        assert!(self.whoami.is_some());
        match x.headers["direction"].as_str() {
            "request" => {
                 match x.headers["location"].as_str() {
                 "ingress" => { return self.on_incoming_requests(x.clone()); }
                 "egress" => { return self.on_outgoing_requests(x.clone()); }
                 _ => { panic!("Filter got an rpc with no location\n"); }
                 }
             }
             "response" => {
                 match x.headers["location"].as_str() {
                 "ingress" => { return self.on_incoming_responses(x.clone()); }
                 "egress" => { return self.on_outgoing_responses(x.clone()); }
                 _ => { panic!("Filter got an rpc with no location\n"); }
                 }
             }
             _ => { panic!("Filter got an rpc with no direction\n"); }
        }
    }

}
