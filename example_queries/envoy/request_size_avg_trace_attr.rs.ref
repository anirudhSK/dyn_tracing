// ---------------------- Generated Functions ----------------------------

use super::filter_base::fetch_property;
use super::filter_base::HttpHeaders;
use indexmap::IndexMap;
use petgraph::graph::{Graph, NodeIndex};
use utils::graph::graph_utils::generate_target_graph;
use utils::graph::graph_utils::get_node_with_id;
use utils::graph::serde::FerriedData;
use utils::graph::serde::Property;

// insert UDFs here


pub fn create_target_graph() -> Graph<
    (
        std::string::String,
        IndexMap<std::string::String, std::string::String>,
    ),
    (),
> {
     let vertices = vec!( "a".to_string(),"b".to_string(),"c".to_string(), );
        let edges = vec!(  ("a".to_string(), "b".to_string() ),  ("b".to_string(), "c".to_string() ),  );
        let mut ids_to_properties: IndexMap<String, IndexMap<String, String>> = IndexMap::new();
        ids_to_properties.insert("a".to_string(), IndexMap::new());
        ids_to_properties.insert("b".to_string(), IndexMap::new());
        ids_to_properties.insert("c".to_string(), IndexMap::new());
        let mut b_hashmap = ids_to_properties.get_mut("b").unwrap();
        b_hashmap.insert("node.metadata.WORKLOAD_NAME".to_string(), "reviews-v1".to_string());
        return generate_target_graph(vertices, edges, ids_to_properties);

}

pub fn collect_envoy_properties(
    http_headers: &HttpHeaders,
    fd: &mut FerriedData,
) -> Result<(), String> {
    let prop_tuple = fetch_property(&http_headers.workload_name,
                                        &vec!["node", "metadata", "WORKLOAD_NAME", ],
                                        http_headers)?;
    fd.unassigned_properties.push(prop_tuple);
    let prop_tuple = fetch_property(&http_headers.workload_name,
                                        &vec!["request", "total_size", ],
                                        http_headers)?;
    fd.unassigned_properties.push(prop_tuple);
    
    return Ok(());
}

pub fn execute_udfs_and_check_trace_lvl_prop(http_headers: &HttpHeaders, fd: &mut FerriedData) -> bool {
    // Empty for this query, but in general, will be useful
    
    let root_id = "productpage-v1";
    
            if &http_headers.workload_name == root_id {        let mut trace_prop_str : String;

                let root_node = get_node_with_id(&fd.trace_graph, "productpage-v1".to_string()).unwrap();
                if ! ( fd.trace_graph.node_weight(root_node).unwrap().1.contains_key("request.total_size") &&
                    fd.trace_graph.node_weight(root_node).unwrap().1["request.total_size"] == "1" ){
                    // TODO:  replace fd
                    match serde_json::to_string(&fd) {
                        Ok(fd_str) => {
                            return false;
                        }
                        Err(e) => {
                            log::error!("could not serialize baggage {0}
", e);
                            return false;
                        }
                     }
                     return false;
                }
                       }
    return true;
}

pub fn get_value_for_storage(
    target_graph: &Graph<
        (
            std::string::String,
            IndexMap<std::string::String, std::string::String>,
        ),
        (),
    >,
    mapping: &Vec<(NodeIndex, NodeIndex)>,
    stored_data: &FerriedData,
) -> Option<String> {
    let value: String;
    let trace_node_idx = get_node_with_id(&fd.trace_graph, "productpage-v1".to_string());
        if trace_node_idx.is_none() {
           log::error!("Node productpage-v1 not found");
                return None;
        }
        let ret = &fd.trace_graph.node_weight(trace_node_idx.unwrap()).unwrap().1["request.total_size"];

        value = ret.to_string();


    return Some(value);
}


