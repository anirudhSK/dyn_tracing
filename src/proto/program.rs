// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/proto/program.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Pattern {
    // message fields
    pub src: ::std::string::String,
    pub dst: ::std::string::String,
    pub rel_typ: Pattern_RelationshipType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pattern {
    fn default() -> &'a Pattern {
        <Pattern as ::protobuf::Message>::default_instance()
    }
}

impl Pattern {
    pub fn new() -> Pattern {
        ::std::default::Default::default()
    }

    // string src = 1;


    pub fn get_src(&self) -> &str {
        &self.src
    }
    pub fn clear_src(&mut self) {
        self.src.clear();
    }

    // Param is passed by value, moved
    pub fn set_src(&mut self, v: ::std::string::String) {
        self.src = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_src(&mut self) -> &mut ::std::string::String {
        &mut self.src
    }

    // Take field
    pub fn take_src(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.src, ::std::string::String::new())
    }

    // string dst = 2;


    pub fn get_dst(&self) -> &str {
        &self.dst
    }
    pub fn clear_dst(&mut self) {
        self.dst.clear();
    }

    // Param is passed by value, moved
    pub fn set_dst(&mut self, v: ::std::string::String) {
        self.dst = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dst(&mut self) -> &mut ::std::string::String {
        &mut self.dst
    }

    // Take field
    pub fn take_dst(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dst, ::std::string::String::new())
    }

    // .Pattern.RelationshipType rel_typ = 3;


    pub fn get_rel_typ(&self) -> Pattern_RelationshipType {
        self.rel_typ
    }
    pub fn clear_rel_typ(&mut self) {
        self.rel_typ = Pattern_RelationshipType::PATH;
    }

    // Param is passed by value, moved
    pub fn set_rel_typ(&mut self, v: Pattern_RelationshipType) {
        self.rel_typ = v;
    }
}

impl ::protobuf::Message for Pattern {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.src)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dst)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_typ, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.src.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.src);
        }
        if !self.dst.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dst);
        }
        if self.rel_typ != Pattern_RelationshipType::PATH {
            my_size += ::protobuf::rt::enum_size(3, self.rel_typ);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.src.is_empty() {
            os.write_string(1, &self.src)?;
        }
        if !self.dst.is_empty() {
            os.write_string(2, &self.dst)?;
        }
        if self.rel_typ != Pattern_RelationshipType::PATH {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.rel_typ))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pattern {
        Pattern::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "src",
                |m: &Pattern| { &m.src },
                |m: &mut Pattern| { &mut m.src },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dst",
                |m: &Pattern| { &m.dst },
                |m: &mut Pattern| { &mut m.dst },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Pattern_RelationshipType>>(
                "rel_typ",
                |m: &Pattern| { &m.rel_typ },
                |m: &mut Pattern| { &mut m.rel_typ },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pattern>(
                "Pattern",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pattern {
        static instance: ::protobuf::rt::LazyV2<Pattern> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pattern::new)
    }
}

impl ::protobuf::Clear for Pattern {
    fn clear(&mut self) {
        self.src.clear();
        self.dst.clear();
        self.rel_typ = Pattern_RelationshipType::PATH;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pattern {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Pattern_RelationshipType {
    PATH = 0,
    EDGE = 1,
}

impl ::protobuf::ProtobufEnum for Pattern_RelationshipType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Pattern_RelationshipType> {
        match value {
            0 => ::std::option::Option::Some(Pattern_RelationshipType::PATH),
            1 => ::std::option::Option::Some(Pattern_RelationshipType::EDGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Pattern_RelationshipType] = &[
            Pattern_RelationshipType::PATH,
            Pattern_RelationshipType::EDGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Pattern_RelationshipType>("Pattern.RelationshipType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Pattern_RelationshipType {
}

impl ::std::default::Default for Pattern_RelationshipType {
    fn default() -> Self {
        Pattern_RelationshipType::PATH
    }
}

impl ::protobuf::reflect::ProtobufValue for Pattern_RelationshipType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Filter {
    // message fields
    pub node_id: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub value_oneof: ::std::option::Option<Filter_oneof_value_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Filter {
    fn default() -> &'a Filter {
        <Filter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Filter_oneof_value_oneof {
    u32(u32),
    str(::std::string::String),
}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    // string node_id = 1;


    pub fn get_node_id(&self) -> &str {
        &self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: ::std::string::String) {
        self.node_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_id(&mut self) -> &mut ::std::string::String {
        &mut self.node_id
    }

    // Take field
    pub fn take_node_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_id, ::std::string::String::new())
    }

    // repeated string properties = 2;


    pub fn get_properties(&self) -> &[::std::string::String] {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    // uint32 u32 = 3;


    pub fn get_u32(&self) -> u32 {
        match self.value_oneof {
            ::std::option::Option::Some(Filter_oneof_value_oneof::u32(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_u32(&mut self) {
        self.value_oneof = ::std::option::Option::None;
    }

    pub fn has_u32(&self) -> bool {
        match self.value_oneof {
            ::std::option::Option::Some(Filter_oneof_value_oneof::u32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_u32(&mut self, v: u32) {
        self.value_oneof = ::std::option::Option::Some(Filter_oneof_value_oneof::u32(v))
    }

    // string str = 4;


    pub fn get_str(&self) -> &str {
        match self.value_oneof {
            ::std::option::Option::Some(Filter_oneof_value_oneof::str(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_str(&mut self) {
        self.value_oneof = ::std::option::Option::None;
    }

    pub fn has_str(&self) -> bool {
        match self.value_oneof {
            ::std::option::Option::Some(Filter_oneof_value_oneof::str(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_str(&mut self, v: ::std::string::String) {
        self.value_oneof = ::std::option::Option::Some(Filter_oneof_value_oneof::str(v))
    }

    // Mutable pointer to the field.
    pub fn mut_str(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Filter_oneof_value_oneof::str(_)) = self.value_oneof {
        } else {
            self.value_oneof = ::std::option::Option::Some(Filter_oneof_value_oneof::str(::std::string::String::new()));
        }
        match self.value_oneof {
            ::std::option::Option::Some(Filter_oneof_value_oneof::str(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_str(&mut self) -> ::std::string::String {
        if self.has_str() {
            match self.value_oneof.take() {
                ::std::option::Option::Some(Filter_oneof_value_oneof::str(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for Filter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.properties)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_oneof = ::std::option::Option::Some(Filter_oneof_value_oneof::u32(is.read_uint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_oneof = ::std::option::Option::Some(Filter_oneof_value_oneof::str(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_id);
        }
        for value in &self.properties {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.value_oneof {
            match v {
                &Filter_oneof_value_oneof::u32(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Filter_oneof_value_oneof::str(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.node_id.is_empty() {
            os.write_string(1, &self.node_id)?;
        }
        for v in &self.properties {
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.value_oneof {
            match v {
                &Filter_oneof_value_oneof::u32(v) => {
                    os.write_uint32(3, v)?;
                },
                &Filter_oneof_value_oneof::str(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Filter {
        Filter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "node_id",
                |m: &Filter| { &m.node_id },
                |m: &mut Filter| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "properties",
                |m: &Filter| { &m.properties },
                |m: &mut Filter| { &mut m.properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "u32",
                Filter::has_u32,
                Filter::get_u32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "str",
                Filter::has_str,
                Filter::get_str,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Filter>(
                "Filter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Filter {
        static instance: ::protobuf::rt::LazyV2<Filter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Filter::new)
    }
}

impl ::protobuf::Clear for Filter {
    fn clear(&mut self) {
        self.node_id.clear();
        self.properties.clear();
        self.value_oneof = ::std::option::Option::None;
        self.value_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Action {
    // message oneof groups
    pub action_oneof: ::std::option::Option<Action_oneof_action_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Action {
    fn default() -> &'a Action {
        <Action as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Action_oneof_action_oneof {
    field_return(Action_Return),
}

impl Action {
    pub fn new() -> Action {
        ::std::default::Default::default()
    }

    // .Action.Return return = 1;


    pub fn get_field_return(&self) -> &Action_Return {
        match self.action_oneof {
            ::std::option::Option::Some(Action_oneof_action_oneof::field_return(ref v)) => v,
            _ => <Action_Return as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_field_return(&mut self) {
        self.action_oneof = ::std::option::Option::None;
    }

    pub fn has_field_return(&self) -> bool {
        match self.action_oneof {
            ::std::option::Option::Some(Action_oneof_action_oneof::field_return(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_return(&mut self, v: Action_Return) {
        self.action_oneof = ::std::option::Option::Some(Action_oneof_action_oneof::field_return(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_return(&mut self) -> &mut Action_Return {
        if let ::std::option::Option::Some(Action_oneof_action_oneof::field_return(_)) = self.action_oneof {
        } else {
            self.action_oneof = ::std::option::Option::Some(Action_oneof_action_oneof::field_return(Action_Return::new()));
        }
        match self.action_oneof {
            ::std::option::Option::Some(Action_oneof_action_oneof::field_return(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_return(&mut self) -> Action_Return {
        if self.has_field_return() {
            match self.action_oneof.take() {
                ::std::option::Option::Some(Action_oneof_action_oneof::field_return(v)) => v,
                _ => panic!(),
            }
        } else {
            Action_Return::new()
        }
    }
}

impl ::protobuf::Message for Action {
    fn is_initialized(&self) -> bool {
        if let Some(Action_oneof_action_oneof::field_return(ref v)) = self.action_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action_oneof = ::std::option::Option::Some(Action_oneof_action_oneof::field_return(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.action_oneof {
            match v {
                &Action_oneof_action_oneof::field_return(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.action_oneof {
            match v {
                &Action_oneof_action_oneof::field_return(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Action {
        Action::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Action_Return>(
                "return",
                Action::has_field_return,
                Action::get_field_return,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Action>(
                "Action",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Action {
        static instance: ::protobuf::rt::LazyV2<Action> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Action::new)
    }
}

impl ::protobuf::Clear for Action {
    fn clear(&mut self) {
        self.action_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Action_Return {
    // message fields
    pub node_id: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Action_Return {
    fn default() -> &'a Action_Return {
        <Action_Return as ::protobuf::Message>::default_instance()
    }
}

impl Action_Return {
    pub fn new() -> Action_Return {
        ::std::default::Default::default()
    }

    // string node_id = 1;


    pub fn get_node_id(&self) -> &str {
        &self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: ::std::string::String) {
        self.node_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_id(&mut self) -> &mut ::std::string::String {
        &mut self.node_id
    }

    // Take field
    pub fn take_node_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_id, ::std::string::String::new())
    }

    // repeated string properties = 2;


    pub fn get_properties(&self) -> &[::std::string::String] {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Action_Return {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_id);
        }
        for value in &self.properties {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.node_id.is_empty() {
            os.write_string(1, &self.node_id)?;
        }
        for v in &self.properties {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Action_Return {
        Action_Return::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "node_id",
                |m: &Action_Return| { &m.node_id },
                |m: &mut Action_Return| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "properties",
                |m: &Action_Return| { &m.properties },
                |m: &mut Action_Return| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Action_Return>(
                "Action.Return",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Action_Return {
        static instance: ::protobuf::rt::LazyV2<Action_Return> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Action_Return::new)
    }
}

impl ::protobuf::Clear for Action_Return {
    fn clear(&mut self) {
        self.node_id.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Action_Return {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Action_Return {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Program {
    // message fields
    pub patterns: ::protobuf::RepeatedField<Pattern>,
    pub filters: ::protobuf::RepeatedField<Filter>,
    pub actions: ::protobuf::RepeatedField<Action>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Program {
    fn default() -> &'a Program {
        <Program as ::protobuf::Message>::default_instance()
    }
}

impl Program {
    pub fn new() -> Program {
        ::std::default::Default::default()
    }

    // repeated .Pattern patterns = 1;


    pub fn get_patterns(&self) -> &[Pattern] {
        &self.patterns
    }
    pub fn clear_patterns(&mut self) {
        self.patterns.clear();
    }

    // Param is passed by value, moved
    pub fn set_patterns(&mut self, v: ::protobuf::RepeatedField<Pattern>) {
        self.patterns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_patterns(&mut self) -> &mut ::protobuf::RepeatedField<Pattern> {
        &mut self.patterns
    }

    // Take field
    pub fn take_patterns(&mut self) -> ::protobuf::RepeatedField<Pattern> {
        ::std::mem::replace(&mut self.patterns, ::protobuf::RepeatedField::new())
    }

    // repeated .Filter filters = 2;


    pub fn get_filters(&self) -> &[Filter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<Filter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<Filter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }

    // repeated .Action actions = 3;


    pub fn get_actions(&self) -> &[Action] {
        &self.actions
    }
    pub fn clear_actions(&mut self) {
        self.actions.clear();
    }

    // Param is passed by value, moved
    pub fn set_actions(&mut self, v: ::protobuf::RepeatedField<Action>) {
        self.actions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actions(&mut self) -> &mut ::protobuf::RepeatedField<Action> {
        &mut self.actions
    }

    // Take field
    pub fn take_actions(&mut self) -> ::protobuf::RepeatedField<Action> {
        ::std::mem::replace(&mut self.actions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Program {
    fn is_initialized(&self) -> bool {
        for v in &self.patterns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.actions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.patterns)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.actions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.patterns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.patterns {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.filters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.actions {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Program {
        Program::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pattern>>(
                "patterns",
                |m: &Program| { &m.patterns },
                |m: &mut Program| { &mut m.patterns },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                "filters",
                |m: &Program| { &m.filters },
                |m: &mut Program| { &mut m.filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Action>>(
                "actions",
                |m: &Program| { &m.actions },
                |m: &mut Program| { &mut m.actions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Program>(
                "Program",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Program {
        static instance: ::protobuf::rt::LazyV2<Program> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Program::new)
    }
}

impl ::protobuf::Clear for Program {
    fn clear(&mut self) {
        self.patterns.clear();
        self.filters.clear();
        self.actions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Program {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Program {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17src/proto/program.proto\"\x89\x01\n\x07Pattern\x12\x10\n\x03src\
    \x18\x01\x20\x01(\tR\x03src\x12\x10\n\x03dst\x18\x02\x20\x01(\tR\x03dst\
    \x122\n\x07rel_typ\x18\x03\x20\x01(\x0e2\x19.Pattern.RelationshipTypeR\
    \x06relTyp\"&\n\x10RelationshipType\x12\x08\n\x04PATH\x10\0\x12\x08\n\
    \x04EDGE\x10\x01\"x\n\x06Filter\x12\x17\n\x07node_id\x18\x01\x20\x01(\tR\
    \x06nodeId\x12\x1e\n\nproperties\x18\x02\x20\x03(\tR\nproperties\x12\x12\
    \n\x03u32\x18\x03\x20\x01(\rH\0R\x03u32\x12\x12\n\x03str\x18\x04\x20\x01\
    (\tH\0R\x03strB\r\n\x0bvalue_oneof\"\x85\x01\n\x06Action\x12(\n\x06retur\
    n\x18\x01\x20\x01(\x0b2\x0e.Action.ReturnH\0R\x06return\x1aA\n\x06Return\
    \x12\x17\n\x07node_id\x18\x01\x20\x01(\tR\x06nodeId\x12\x1e\n\npropertie\
    s\x18\x02\x20\x03(\tR\npropertiesB\x0e\n\x0caction_oneof\"u\n\x07Program\
    \x12$\n\x08patterns\x18\x01\x20\x03(\x0b2\x08.PatternR\x08patterns\x12!\
    \n\x07filters\x18\x02\x20\x03(\x0b2\x07.FilterR\x07filters\x12!\n\x07act\
    ions\x18\x03\x20\x03(\x0b2\x07.ActionR\x07actionsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
